#!/usr/bin/python3

import requests
import readline
import json
import os
import sys 
import base64
from tabulate import tabulate



def check_apikey():
    if api_header != None:
        result = True
    else:
        result = False
    return result

def get_meta(path, ident=None, resource=None):
    if ident == None:
        url = '{}{}/'.format(api_url, path)
    elif resource == 'org':
        url = '{}/organizations/{}/{}'.format(api_url, ident, path)
    elif resource =='net':
        for items in ident:
            url = '{}/networks/{}/{}'.format(api_url, items, path)
    api_data = requests.get(url, headers=api_header)
    return api_data, path

    
    
def camera_screenshot(serial, net_id):
    serial = serial.json()[0]['serial']
    payload = '''{}'''
    url = 'https://api.meraki.com/api/v1/devices/{}/camera/generateSnapshot'.format(serial)
    print('standby.... taking screenshot now')
    print(url)
    api_data = requests.post(url, headers=api_header, data=payload)
    print('*'*10)
    print('Your image is available at: {}'.format(api_data.json()['url']))
    _ans = input('would you like to exit? :')
    if _ans == 'y'.lower():
        sys.exit(0)
    else:
        return api_data


def show_printer(key, api_result, org):
    os.system('clear')
    print('*'*10)
    print('All {} listed for Org: {}'.format(key, org.json()[0]['name']))
    print('*'*10)
    removed_keys = ['url', 'lng', 'lat', 'configurationUpdatedAt', 'firmware', 'sensor']
    dict1 = []
    for items in api_result:
        for key in removed_keys:
            try:
                items.pop(key)
            except:
                pass
        dict1.append(items)
    print(tabulate(dict1, headers='keys', tablefmt='psql'))
    reet = input('Please press any key to continue...')
    return

def render_menu():
#    os.system('clear')
    print('Loading tool.....')
    org, key = get_meta('organizations')
    org_id = org.json()[0]['id']
    net, key = get_meta('networks', org_id, 'org')
    net = net.json()
    netlist = []
    for nets in range(len(net)):
        netlist.append(net[nets]['id'])
    while True:
        print('*'*10)
        print('Meraki query tool')
        print('*'*10)
        if api_confirm == True:
            print('API Key Loaded!')
        print('Orginization ID: {}'.format(org_id))
        print('API URL: {}'.format(api_url))
        print('*'*10)
        print('*'*10)
        print('1.) List All devices')
        print('2.) List All networks')
        print('3.) Take Camera Screenshot')
        print('4.) List Clients\n')
        ans = input('Please make a selection: ')
        if ans == '1':
            api_result, key = get_meta('devices', org_id, 'org') 
            api_result = api_result.json()
        elif ans == '2':
            api_result, key = get_meta('networks', org_id, 'org') 
            api_result = api_result.json()
        elif ans == '3':
            serial, key = get_meta('devices', org_id, 'org')
            api_data = camera_screenshot(serial, netlist) 
        elif ans == '4':
            api_result, key = get_meta('clients', netlist, 'net')
            api_result = api_result.json()
        elif ans == '5':
            sys.exit(1)
        if ans != '3':
            show_printer(key, api_result, org)
                

###############consts
try:
    material = open('config', 'r')
except FileNotFoundError: 
    print('!!!configuration file missing, create it please!!!!')
    exit(0)
material =  base64.b64decode(material.read()).decode("utf-8")
api_header = {'X-Cisco-Meraki-API-Key': material}   
api_url = 'https://api.meraki.com/api/v1/'
api_confirm = check_apikey()
render_menu()

